--- kernel-source-2.4.26/mm/mremap.c	2004-04-14 09:05:41.000000000 -0400
+++ mremap.c	2014-05-05 17:42:08.191975592 -0400
@@ -227,6 +227,7 @@
 	struct vm_area_struct *vma;
 	unsigned long ret = -EINVAL;
 
+	printk(KERN_DEBUG "[%0x]remap: flags:%0x\n",addr,flags);
 	if (flags & ~(MREMAP_FIXED | MREMAP_MAYMOVE))
 		goto out;
 
@@ -235,6 +236,7 @@
 
 	old_len = PAGE_ALIGN(old_len);
 	new_len = PAGE_ALIGN(new_len);
+	printk(KERN_DEBUG "[%0x]remap: old_len:%0x, new_len:%0x\n",addr,old_len,new_len);
 
 	/* new_addr is only valid if MREMAP_FIXED is specified */
 	if (flags & MREMAP_FIXED) {
@@ -285,15 +287,21 @@
 	 */
 	ret = -EFAULT;
 	vma = find_vma(current->mm, addr);
+	printk(KERN_DEBUG "[%0x]remap[%0x]: vma->vm_start:%0x, vma->vm_end:%0x, vma->flags:%0x\n",addr,vma,vma->vm_start,vma->vm_end,vma->vm_flags);
+	printk(KERN_DEBUG "[%0x]remap[%0x]: next: vma->vm_start:%0x, vma->vm_end:%0x, vma->flags:%0x\n",addr,vma->vm_next,vma->vm_next->vm_start,vma->vm_next->vm_end,vma->vm_next->vm_flags);
 	if (!vma || vma->vm_start > addr)
 		goto out;
 	/* We can't remap across vm area boundaries */
 	if (old_len > vma->vm_end - addr)
 		goto out;
+	printk(KERN_DEBUG "[%0x]remap: checking dontexpand\n",addr);
+	printk(KERN_DEBUG "[%0x]remap[%0x]: next: vma->vm_start:%0x, vma->vm_end:%0x, vma->flags:%0x\n",addr,vma->vm_next,vma->vm_next->vm_start,vma->vm_next->vm_end,vma->vm_next->vm_flags);
 	if (vma->vm_flags & VM_DONTEXPAND) {
 		if (new_len > old_len)
 			goto out;
 	}
+	printk(KERN_DEBUG "[%0x]remap: checking vm_locked\n",addr);
+	printk(KERN_DEBUG "[%0x]remap[%0x]: next: vma->vm_start:%0x, vma->vm_end:%0x, vma->flags:%0x\n",addr,vma->vm_next,vma->vm_next->vm_start,vma->vm_next->vm_end,vma->vm_next->vm_flags);
 	if (vma->vm_flags & VM_LOCKED) {
 		unsigned long locked = current->mm->locked_vm << PAGE_SHIFT;
 		locked += new_len - old_len;
@@ -302,10 +310,17 @@
 			goto out;
 	}
 	ret = -ENOMEM;
+	printk(KERN_DEBUG "[%0x]remap: checking total_vm\n",addr);
+	printk(KERN_DEBUG "[%0x]remap[%0x]: next: vma->vm_start:%0x, vma->vm_end:%0x, vma->flags:%0x\n",addr,vma->vm_next,vma->vm_next->vm_start,vma->vm_next->vm_end,vma->vm_next->vm_flags);
 	if ((current->mm->total_vm << PAGE_SHIFT) + (new_len - old_len)
 	    > current->rlim[RLIMIT_AS].rlim_cur)
 		goto out;
+	printk(KERN_DEBUG "[%0x]remap: checking memory availability\n",addr);
+	printk(KERN_DEBUG "[%0x]remap[%0x]: next: vma->vm_start:%0x, vma->vm_end:%0x, vma->flags:%0x\n",addr,vma->vm_next,vma->vm_next->vm_start,vma->vm_next->vm_end,vma->vm_next->vm_flags);
 	/* Private writable mapping? Check memory availability.. */
+	if (!((vma->vm_flags & (VM_SHARED | VM_WRITE)) == VM_WRITE)){
+		printk(KERN_DEBUG "[%0x]remap: skipping the vm_enough_memory\n",addr);
+	}
 	if ((vma->vm_flags & (VM_SHARED | VM_WRITE)) == VM_WRITE &&
 	    !(flags & MAP_NORESERVE)				 &&
 	    !vm_enough_memory((new_len - old_len) >> PAGE_SHIFT))
@@ -314,12 +329,17 @@
 	/* old_len exactly to the end of the area..
 	 * And we're not relocating the area.
 	 */
+	printk(KERN_DEBUG "[%0x]remap: checking memory availability\n",addr);
+	printk(KERN_DEBUG "[%0x]remap[%0x]: next: vma->vm_start:%0x, vma->vm_end:%0x, vma->flags:%0x\n",addr,vma->vm_next,vma->vm_next->vm_start,vma->vm_next->vm_end,vma->vm_next->vm_flags);
 	if (old_len == vma->vm_end - addr &&
 	    !((flags & MREMAP_FIXED) && (addr != new_addr)) &&
 	    (old_len != new_len || !(flags & MREMAP_MAYMOVE))) {
+		printk(KERN_DEBUG "[%0x]remap: enteing if\n",addr);
+	printk(KERN_DEBUG "[%0x]remap[%0x]: next: vma->vm_start:%0x, vma->vm_end:%0x, vma->flags:%0x\n",addr,vma->vm_next,vma->vm_next->vm_start,vma->vm_next->vm_end,vma->vm_next->vm_flags);
 		unsigned long max_addr = TASK_SIZE;
 		if (vma->vm_next)
 			max_addr = vma->vm_next->vm_start;
+		printk(KERN_DEBUG "[%0x]remap: max_addr:%0x \n",max_addr);
 		/* can we just expand the current mapping? */
 		if (max_addr - addr >= new_len) {
 			int pages = (new_len - old_len) >> PAGE_SHIFT;
